package com.example.demo;

/**
 *  方法的重写(Override / Overwrite)
 *
 *  定义:
 *      子类继承父类，对父类中同名同参数的方法进行覆盖操作
 *  应用:
 *      当子类重写父类中的方法后，通过子类对象.对象的方法时，实际上执行的是子类重写父类的方法
 *
 *  重写的规定: -->> 约定:子类中的叫做重写方法，父类中的叫做被重写的方法
 *      权限修饰符 返回值类型 方法名(形参列表) throws 异常类型{
 *          //方法体
 *      }
 *
 *      方法名和形参列表:
 *          子类重写的方法名和形参列表与父类中被重写的方法名和形参列表相同
 *
 *      权限修饰符:
 *          子类重写的方法的权限修饰符不小于父类中被重写方法的权限修饰符  --》》理解:子类比父类更有出息
 *          特列:子类不能获取父类 private 修饰的权限修饰符
 *
 *      返回值:
 *          如果父类被重写方法的返回值是void，那么子类的方法返回值也是void
 *          如果父类被重写方法的返回类型是A类型，那么。。。。A类型或A类型的子类
 *          如果。。。基本数据类型(比如是double)，那么。。。。也是基本数据类型(也是double)
 *
 *      异常类型:
 *          子类抛出的异常，不大于父类抛出的异常 --》》子类比父类更有出息，所以犯得错误就更少
 *  *****************************************************
 *      子类和父类中的同名和同参数的方法要么声明为static(不是重写)，要么声明为非static(考虑重写)
 */

public class OverrideTest {
    public static void main(String[] args) {
        Student student = new Student("计算机科学与技术");
        student.show();//我是一个学生
        student.walk(10);//学生走路
        student.eat();
        System.out.println("*********************");
        student.study();//学习，专业是:计算机科学与技术
        Person person = new Person();
        person.walk(12);//走路，走路的距离是:12公里  我是一个人 吃饭
    }
}
































